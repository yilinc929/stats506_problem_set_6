---
title: "STATS 506 PS 6"
author: "Yilin Chen 30221403"
format:
  html:
    embed-resources: true
editor: visual
---

## Problem 1

### **With Parallel Processing**

### Using `Parallel` Package

```{r}
library(nycflights13)
library(dplyr)
library(parallel)

# Define a function for bootstrapping
bootstrap_statistic <- function(sample) {
  mean(sample$dep_delay, na.rm = TRUE)
}

# Prepare the data
data <- flights %>% 
  select(origin, dest, dep_delay) %>% 
  filter(!is.na(dep_delay))  # Filter out missing values

# Create strata based on 'dest'
strata <- split(data, data$dest)

# Function for bootstrapping a stratum
bootstrap_stratum <- function(stratum) {
  replicate(1000, bootstrap_statistic(stratum[sample(nrow(stratum), nrow(stratum), replace = TRUE), ]))
}

# Setting up parallel processing
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)

# Export necessary functions and libraries to the child processes
clusterExport(cl, varlist = c("bootstrap_statistic", "bootstrap_stratum"))
clusterEvalQ(cl, library(stats))

# Apply the bootstrap function to each stratum
results <- parLapply(cl, strata, bootstrap_stratum)

# Close the parallel cluster
stopCluster(cl)

# calculate estimates and confidence intervals
final_results <- lapply(names(results), function(dest) {
  bootstrapped_values <- do.call(c, results[dest])
  ci <- quantile(bootstrapped_values, probs = c(0.025, 0.975))
  data.frame(
    dest = dest,
    mean_estimate = mean(bootstrapped_values),
    ci_lower = ci[1],
    ci_upper = ci[2]
  )
})

final_results <- do.call(rbind, final_results)

```

```{r}
print(head(final_results),10)
```

### Using `Future` Package

print(final_results)

```{r}
library(nycflights13)
library(dplyr)
library(future)
library(purrr) 

# Define the bootstrap statistic function
bootstrap_statistic <- function(sample) {
  mean(sample$dep_delay, na.rm = TRUE)
}

# Prepare the data
data <- flights %>%
  select(origin, dest, dep_delay) %>%
  filter(!is.na(dep_delay)) # Filter out missing values

# Create strata based on 'dest'
strata <- split(data, data$dest)

# Function for bootstrapping a stratum
bootstrap_stratum <- function(stratum) {
  replicate(1000, bootstrap_statistic(stratum[sample(nrow(stratum), nrow(stratum), replace = TRUE), ]))
}

# Apply the bootstrap function to each stratum
results <- lapply(strata, bootstrap_stratum)

# calculate estimates and confidence intervals
final_results <- map2_dfr(names(results), results, ~{
  bootstrapped_values <- unlist(.y)
  ci <- quantile(bootstrapped_values, probs = c(0.025, 0.975))
  tibble(
    dest = .x,
    mean_estimate = mean(bootstrapped_values),
    ci_lower = ci[1],
    ci_upper = ci[2]
  )
})

```

```{r}
print(final_results)
```

### **Without Any Parallel Processing**

### Serial Computing

```{r}
library(nycflights13)
library(dplyr)
data(flights)

# Define the bootstrap function
bootstrap_fn <- function(data) {
  # Stratified sampling
  boot_samples <- data %>%
    group_by(dest) %>%
    sample_n(size = n(), replace = TRUE) %>%
    ungroup()
  
  # Calculate average air_time per origin
  boot_samples %>%
    group_by(origin) %>%
    summarize(avg_air_time = mean(air_time, na.rm = TRUE))
}

# Perform bootstrap
set.seed(123)
results <- replicate(1000, bootstrap_fn(flights), simplify = FALSE)

# Calculate confidence intervals and compile results
results_df <- bind_rows(results) %>%
  group_by(origin) %>%
  summarize(
    Estimate = mean(avg_air_time),
    Lower_CI = quantile(avg_air_time, probs = 0.025),
    Upper_CI = quantile(avg_air_time, probs = 0.975)
  )
```

```{r}
print(results_df)
```

My Github Repository: <https://github.com/yilinc929/stats506_problem_set_6>

Sources That I Used:
